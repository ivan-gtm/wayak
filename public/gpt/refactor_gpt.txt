Act as an expert in JavaScript development.
Refactor this function to improve the readability and maintainability.I'm using "fabric.js" 2.7.0 and "jQuery" 1.12
This function belongs to a bigger script and is called by another functions, keep original function name to avoid errors with the rest of the code.
Be meticulous with scope variables, taking into consideration that global variables could be used by other functions.
Take your time, write functions one by one, if answer is too big.
To start, list only functions name and a number to identify it, DO NOT PROCEED with functions content until user writes function number, you will answer with code.

function loadObjectOnCanvasFromJSON(lcanvas, json, svg_custom_data12, i) {
    if (DEBUG) {
        console.log("loadObjectOnCanvasFromJSON()");
    }

    DEBUG && console.log("loadObjectOnCanvasFromJSON() json", json),
    lcanvas.renderOnAddRemove = !1,
    lcanvas.loadFromJSON(json, function() {
        lcanvas.bgsrc && setCanvasBg(lcanvas, lcanvas.bgsrc, "", lcanvas.bgScale, i, !0),
        lcanvas.bgColor && "string" == typeof lcanvas.bgColor && !lcanvas.bgsrc && setCanvasBg(lcanvas, "", lcanvas.bgColor, 1, i),
        DEBUG && console.log("svg_custom_data12: ", svg_custom_data12),
        svg_custom_data12.length > 0 ? $.each(svg_custom_data12, function(svg_i, svg_data) {
            if (svg_data && void 0 !== svg_data) {
                if (isSvg(svg_data)) {
                    DEBUG && console.log("svg_data: ", svg_data);
                    var svg_src = svg_data.src;
                    fabric.loadSVGFromURL(svg_src, function(objects, options, svgElements, allSvgElements) {
                        var loadedObject = keepSvgGroups(objects, svgElements, allSvgElements, options);
                        if (DEBUG && console.log("loadedObject", loadedObject),
                        lcanvas.discardActiveObject().renderAll(),
                        loadedObject.set({
                            top: svg_data.top,
                            left: svg_data.left,
                            shadow: svg_data.shadow,
                            stroke: svg_data.stroke,
                            strokeWidth: svg_data.strokeWidth,
                            opacity: svg_data.opacity,
                            index: svg_i,
                            locked: svg_data.locked,
                            src: svg_src,
                            svg_custom_paths: svg_data.svg_custom_paths,
                            originX: svg_data.originX ? svg_data.originX : "center",
                            originY: svg_data.originY ? svg_data.originY : "center",
                            width: svg_data.width,
                            height: svg_data.height
                        }),
                        svg_data.fill && ("string" == typeof svg_data.fill && (loadedObject.fill = svg_data.fill),
                        "object" === _typeof(svg_data.fill) && ("Dpattern" == svg_data.fill.type || "pattern" == svg_data.fill.type)))
                            try {
                                var $p = svg_data.fill;
                                fabric.Dpattern.fromObject($p, function(fill) {
                                    return loadedObject.set({
                                        fill: fill,
                                        dirty: !0
                                    })
                                })
                            } catch (e) {
                                console.log("Error", e, svg_data.fill),
                                loadedObject.fill = svg_data.fill
                            }
                        var $gradientType = getGradientTypeofObject(svg_data);
                        if (!1 !== $gradientType ? applyGradient(svg_data.fill.colorStops[0].color, svg_data.fill.colorStops[1].color, $gradientType, loadedObject) : applyGradient2(svg_data, loadedObject),
                        lcanvas.add(loadedObject),
                        loadedObject.setCoords(),
                        loadedObject.scale(1),
                        loadedObject.set({
                            scaleX: svg_data.scaleX,
                            scaleY: svg_data.scaleY,
                            flipX: svg_data.flipX,
                            flipY: svg_data.flipY,
                            angle: svg_data.angle,
                            top: svg_data.top,
                            left: svg_data.left
                        }),
                        "center" !== loadedObject.originX || "center" !== loadedObject.originY) {
                            var $point = loadedObject.getPointByOrigin("center", "center");
                            loadedObject.set({
                                originX: "center",
                                originY: "center",
                                left: $point.x,
                                top: $point.y
                            })
                        }
                        loadedObject.setCoords(),
                        loadedObject.hasRotatingPoint = !0,
                        "object" === _typeof(svg_data.svg_custom_paths) && $.each(svg_data.svg_custom_paths, function(path_i, path_data) {
                            if (path_data && void 0 !== path_data) {
                                DEBUG && console.log("loadObjectOnCanvasFromJSON() path_i, path_data ", path_i, path_data);
                                var $index = path_data.index ? path_data.index : path_i;
                                if ("fill" == path_data.action)
                                    if (!path_data.color_value || "object" !== _typeof(path_data.color_value) || "linear" !== path_data.color_value.type && "radial" !== path_data.color_value.type)
                                        loadedObject._objects && loadedObject._objects[$index] ? "group" === loadedObject._objects[$index].type && loadedObject._objects[$index]._objects ? $.each(loadedObject._objects[$index]._objects, function($i, $child) {
                                            $child.set("fill", path_data.color_value)
                                        }) : loadedObject._objects[$index] && loadedObject._objects[$index].set("fill", path_data.color_value) : loadedObject && loadedObject.set("fill", path_data.color_value);
                                    else {
                                        var $gradientType = "color-fill";
                                        0 !== path_data.color_value.coords.x2 && ($gradientType = "linear-gradient-h-fill"),
                                        0 !== path_data.color_value.coords.y2 && ($gradientType = "linear-gradient-v-fill"),
                                        0 !== path_data.color_value.coords.x2 && 0 !== path_data.color_value.coords.y2 && ($gradientType = "linear-gradient-d-fill"),
                                        void 0 !== path_data.color_value.coords.r1 && ($gradientType = "radial-gradient-fill"),
                                        applyGradient(path_data.color_value.colorStops[0].color, path_data.color_value.colorStops[1].color, $gradientType, loadedObject._objects[$index])
                                    }
                                else
                                    "stroke" == path_data.action && (loadedObject._objects[$index].stroke = path_data.color_value)
                            } else
                                path_data && path_data.color_value && (loadedObject.fill = path_data.color_value,
                                loadedObject.dirty = !0)
                        }),
                        svg_data.stroke && loadedObject.paths && $.each(loadedObject.paths, function(path_i, path_data) {
                            path_data.set("strokeWidth", svg_data.strokeWidth),
                            path_data.set("stroke", svg_data.stroke)
                        }),
                        svg_data.stroke && loadedObject._objects && $.each(loadedObject._objects, function(path_i, path_data) {
                            path_data.set("strokeWidth", svg_data.strokeWidth),
                            path_data.set("stroke", svg_data.stroke)
                        }),
                        loadedObject.moveTo(svg_i),
                        lcanvas.renderAll()
                    })
                }
                svg_data.svg_custom_data && ($.each(svg_data.svg_custom_data, function($index, $svg_data) {
                    "object" === _typeof($svg_data) && isSvg($svg_data) && fabric.loadSVGFromURL($svg_data.src, function(objects, options, svgElements, allSvgElements) {
                        var $object = fabric.util.groupSVGElements(objects, options);
                        $object.set({
                            top: $svg_data.top,
                            left: $svg_data.left,
                            shadow: $svg_data.shadow,
                            stroke: $svg_data.stroke,
                            strokeWidth: $svg_data.strokeWidth,
                            opacity: $svg_data.opacity,
                            index: $index,
                            locked: $svg_data.locked,
                            src: $svg_data.src,
                            svg_custom_paths: $svg_data.svg_custom_paths,
                            originX: $svg_data.originX ? $svg_data.originX : "center",
                            originY: $svg_data.originY ? $svg_data.originY : "center",
                            width: $svg_data.width,
                            height: $svg_data.height
                        }),
                        $svg_data.fill && ($object.fill = $svg_data.fill);
                        var $gradientType = getGradientTypeofObject($svg_data);
                        !1 !== $gradientType && applyGradient($svg_data.fill.colorStops[0].color, $svg_data.fill.colorStops[1].color, $gradientType, $object),
                        $object.set({
                            scaleX: $svg_data.scaleX,
                            scaleY: $svg_data.scaleY,
                            flipX: $svg_data.flipX,
                            flipY: $svg_data.flipY,
                            angle: $svg_data.angle,
                            top: $svg_data.top,
                            left: $svg_data.left
                        }),
                        $object.setCoords(),
                        $object.hasRotatingPoint = !0,
                        "object" === _typeof($svg_data.svg_custom_paths) && $.each($svg_data.svg_custom_paths, function($path_i, $path_data) {
                            if ($path_data && void 0 !== $path_data) {
                                DEBUG && console.log("loadObjectOnCanvasFromJSON() path_i, path_data ", $path_i, $path_data);
                                var $index2 = $path_data.index ? $path_data.index : path_i;
                                if ("fill" == $path_data.action)
                                    if (!$path_data.color_value || "object" !== _typeof($path_data.color_value) || "linear" !== $path_data.color_value.type && "radial" !== $path_data.color_value.type)
                                        $object._objects && $object._objects[$index2] ? "group" === $object._objects[$index2].type && $object._objects[$index2]._objects ? $.each($object._objects[$index2]._objects, function($i, $child) {
                                            $child.set("fill", $path_data.color_value)
                                        }) : $object._objects[$index2] && $object._objects[$index2].set("fill", $path_data.color_value) : $object && $object.set("fill", $path_data.color_value);
                                    else {
                                        var $gradientType = "color-fill";
                                        0 !== $path_data.color_value.coords.x2 && ($gradientType = "linear-gradient-h-fill"),
                                        0 !== $path_data.color_value.coords.y2 && ($gradientType = "linear-gradient-v-fill"),
                                        0 !== $path_data.color_value.coords.x2 && 0 !== $path_data.color_value.coords.y2 && ($gradientType = "linear-gradient-d-fill"),
                                        void 0 !== $path_data.color_value.coords.r1 && ($gradientType = "radial-gradient-fill"),
                                        applyGradient($path_data.color_value.colorStops[0].color, $path_data.color_value.colorStops[1].color, $gradientType, $object._objects[$index2])
                                    }
                                else
                                    "stroke" == $path_data.action && ($object._objects[$index].stroke = $path_data.color_value)
                            } else
                                $path_data && $path_data.color_value && ($object.fill = $path_data.color_value,
                                $object.dirty = !0)
                        }),
                        $svg_data.stroke && $object.paths && $.each($object.paths, function($path_i, $path_data) {
                            $path_data.set("strokeWidth", $svg_data.strokeWidth),
                            $path_data.set("stroke", $svg_data.stroke)
                        }),
                        $svg_data.stroke && $object._objects && $.each($object._objects, function($path_i, $path_data) {
                            $path_data.set("strokeWidth", $svg_data.strokeWidth),
                            $path_data.set("stroke", $svg_data.stroke)
                        }),
                        lcanvas._objects[svg_i].insertAt($object, svg_i),
                        lcanvas.renderAll(),
                        DEBUG && console.log("svg_i, $index", svg_i, $index)
                    })
                }),
                DEBUG && console.log("svg_data.svg_custom_data", svg_data.svg_custom_data)),
                svg_custom_data12.length == svg_i + 1 && checkIfGroupsNeedsSVGLoading(lcanvas, i)
            } else
                svg_custom_data12.length == svg_i + 1 && checkIfGroupsNeedsSVGLoading(lcanvas, i)
        }) : checkIfGroupsNeedsSVGLoading(lcanvas, i)
    }),
    demo_as_id && setDemoOverlay()
}

// improve the readability and maintainability of objectSelected function

Act as an expert in JavaScript development.
Improve readability and maintainability of this lines of JS code, I'm using "fabric.js" 2.7.0 and "jQuery" 1.12:
Take your time, write functions one by one, if answer is too big.
To start, list only functions name and a number to identify it, DO NOT PROCEED with functions content until user specifies selects a function number.
......